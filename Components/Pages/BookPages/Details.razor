@page "/books/details"
@using Microsoft.EntityFrameworkCore
@using MediaWebApp.Components
@using System.ComponentModel.DataAnnotations
@using System.Web
@inject IDbContextFactory<MediaWebApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Book</h2>
    <hr />
    @if (book is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">

            <!-- Image -->
            <dt class="col-sm-2">Cover</dt>
            <dd class="col-sm-10">
                @if (!string.IsNullOrEmpty(book.ImageUrl))
                {
                    <img src="@book.ImageUrl"
                    alt="Cover of @book.Title"
                    class="img-fluid rounded"
                    style="max-height: 300px;"
                    onerror="this.style.display='none'" />
                }
                else
                {
                    <span class="text-muted">No cover image </span>
                }
            </dd>

            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@book.Title</dd>
            <dt class="col-sm-2">Author</dt>
            <dd class="col-sm-10">@book.Author</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@book.Description</dd>
            <dt class="col-sm-2">RelaseDate</dt>
            <dd class="col-sm-10">@book.RelaseDate</dd>
            <dt class="col-sm-2">Rating</dt>
            <dd class="col-sm-10">@book.Rating</dd>
        </dl>


        <!-- rating -->
        <!-- rating form -->
        <EditForm method="post" Model="@ratingModel" OnValidSubmit="@SubmitRating" FormName="rateBook" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="rating" class="form-label">Your Rating (1-10)</label>
                <InputNumber id="rating" @bind-Value="ratingModel.Value"
                             class="form-control"
                             min="1"
                             max="10" />
                <ValidationMessage For="@(() => ratingModel.Value)" />
            </div>

            <button type="submit" class="btn btn-primary">Submit Rating</button>
        </EditForm>

     
        <div>
            <a href="@($"/books/edit?id={book.Id}")">Edit</a> |
            <a href="@($"/books")">Back to List</a>
        </div>
    }
</div>

@code {
    private Book? book;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private RatingModel ratingModel { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadBook();
    }

    private async Task LoadBook()
    {
        using var context = DbFactory.CreateDbContext();
        book = await context.Books.FirstOrDefaultAsync(m => m.Id == Id);

        if (book is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task SubmitRating()
    {
        if (book is null || ratingModel.Value < 1 || ratingModel.Value > 10) return;

        using var context = DbFactory.CreateDbContext();
        var currentBook = await context.Books.FirstOrDefaultAsync(m => m.Id == Id);
        if (currentBook is null) return;

        float newRating;
        if (currentBook.TotalRatings == 0)
        {
            newRating = ratingModel.Value;
        }
        else
        {
            float currentTotal = currentBook.Rating * currentBook.TotalRatings;
            newRating = (currentTotal + ratingModel.Value) / (currentBook.TotalRatings + 1);
        }

        currentBook.Rating = newRating;
        currentBook.TotalRatings++;

        await context.SaveChangesAsync();
        await LoadBook();
    }

    public class RatingModel
    {
        [Required(ErrorMessage = "Rating is required")]
        [Range(1, 10, ErrorMessage = "Must be between 1-10")]
        public int Value { get; set; } = 5; // Default value
    }
}