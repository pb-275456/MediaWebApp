@page "/books/create"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using MediaWebApp.Components
@inject IDbContextFactory<MediaWebApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Book</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Book" OnValidSubmit="AddBook" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>

            <!-- Title -->
            <div class="mb-3">
                <label for="title" class="form-label">Title:</label> 
                <InputText id="title" @bind-Value="Book.Title" class="form-control" /> 
                <ValidationMessage For="() => Book.Title" class="text-danger" /> 
            </div>        

            <!-- Author -->
            <div class="mb-3">
                <label for="author" class="form-label">Author:</label>
                <InputText id="author" @bind-Value="Book.Author" class="form-control" />
                <ValidationMessage For="() => Book.Author" class="text-danger" />
            </div>

            <!-- Description -->
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label> 
                <InputText id="description" @bind-Value="Book.Description" class="form-control" /> 
                <ValidationMessage For="() => Book.Description" class="text-danger" /> 
            </div>        

            <!-- realese date -->
            <div class="mb-3">
                <label for="relasedate" class="form-label">RelaseDate:</label> 
                <InputDate id="relasedate" @bind-Value="Book.RelaseDate" class="form-control" /> 
                <ValidationMessage For="() => Book.RelaseDate" class="text-danger" /> 
            </div>   
            
            <!-- Image -->
            <div class="mb-3">
                <label for="imageUrl" class="form-label">Cover Image URL:</label>
                <InputText id="imageUrl" @bind-Value="Book.ImageUrl" class="form-control" />
                <ValidationMessage For="() => Book.ImageUrl" class="text-danger" />
                @if (!string.IsNullOrEmpty(Book.ImageUrl))
                {
                    <div class="mt-2">
                        <img src="@Book.ImageUrl" alt="Book cover preview" style="max-height: 150px;" class="img-thumbnail" />
                    </div>
                }
            </div>
        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/books">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Book Book { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddBook()
    {
        using var context = DbFactory.CreateDbContext();
        context.Books.Add(Book);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/books");
    }
}
